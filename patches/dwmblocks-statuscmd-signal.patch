diff --git a/dwmblocks.c b/dwmblocks.c
index 8668f04..5c4cdfb 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -15,6 +15,7 @@ typedef struct {
 } Block;
 void dummysighandler(int num);
 void sighandler(int num);
+void buttonhandler(int sig, siginfo_t *st, void *ucontext);
 void getcmds(int time);
 #ifndef __OpenBSD__
 void getsigcmds(int signal);
@@ -34,22 +35,42 @@ static int screen;
 static Window root;
 static char statusbar[LENGTH(blocks)][CMDLENGTH] = {0};
 static char statusstr[2][256];
+static char exportstring[CMDLENGTH + 16] = "export BUTTON=-;";
+static int button = 0;
 static int statusContinue = 1;
 static void (*writestatus) () = setroot;
 
 //opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
+    if (block->signal)
+    {
+        output[0] = block->signal;
+        output++;
+    }
 	strcpy(output, block->icon);
-	char *cmd = block->command;
-	FILE *cmdf = popen(cmd,"r");
+	char *cmd;
+	FILE *cmdf;
+    if (button)
+    {
+        cmd = strcat(exportstring, block->command);
+        cmd[14] = '0' + button;
+        button = 0;
+        cmdf = popen(cmd, "r");
+        cmd[16] = '\0';
+    }
+    else
+    {
+        cmd = block-> command;
+        cmdf = popen(cmd, "r");
+    }
 	if (!cmdf)
 		return;
 	char c;
 	int i = strlen(block->icon);
 	fgets(output+i, CMDLENGTH-i, cmdf);
 	i = strlen(output);
-	if (delim != '\0' && --i)
+	if (delim != '\0' && i)
 		output[i++] = delim;
 	output[i++] = '\0';
 	pclose(cmdf);
@@ -80,6 +101,7 @@ void getsigcmds(int signal)
 
 void setupsignals()
 {
+    struct sigaction sa;
     /* initialize all real time signals with dummy handler */
     for(int i = SIGRTMIN; i <= SIGRTMAX; i++)
         signal(i, dummysighandler);
@@ -87,8 +109,14 @@ void setupsignals()
 	for(int i = 0; i < LENGTH(blocks); i++)
 	{
 		if (blocks[i].signal > 0)
+        {
 			signal(SIGRTMIN+blocks[i].signal, sighandler);
+           sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal);
+        }
 	}
+    sa.sa_sigaction = buttonhandler;
+    sa.sa_flags = SA_SIGINFO;
+    sigaction(SIGUSR1, &sa, NULL);
 
 }
 #endif
@@ -158,6 +186,13 @@ void sighandler(int signum)
 }
 #endif
 
+void buttonhandler(int sig, siginfo_t *si, void *ucontext)
+{
+    button = si -> si_value.sival_int & 0xff;
+    getsigcmds(si->si_value.sival_int >> 8);
+    writestatus();
+}
+
 void termhandler(int signum)
 {
 	statusContinue = 0;
